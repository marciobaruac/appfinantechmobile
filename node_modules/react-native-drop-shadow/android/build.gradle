buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

def resolveReactNativeDirectory() {
  def reactNativeLocation = rootProject.hasProperty("reactNativeDir") ? rootProject.getProperty("reactNativeDir") : null

  if (reactNativeLocation != null) {
    return file(reactNativeLocation)
  }

  try {
    // Resolve React Native location with Node
    // This will make sure that we get installation location correctly in monorepos
    def reactNativePackageJsonPathStdout = new ByteArrayOutputStream()

    exec {
      commandLine("node", "-p", "require.resolve('react-native/package.json')")
      ignoreExitValue true
      standardOutput = reactNativePackageJsonPathStdout
    }

    def reactNativeFromProjectNodeModules = file(reactNativePackageJsonPathStdout.toString().trim()).getParentFile();

    if (reactNativeFromProjectNodeModules.exists()) {
      return reactNativeFromProjectNodeModules
    }
  } catch (e) {
    // Ignore
  }

  throw new Exception(
    "${project.name}: Failed to resolve 'react-native' in the project. " +
    "Altenatively, you can specify 'reactNativeDir' with the path to 'react-native' in your 'gradle.properties' file."
  )
}

apply plugin: "com.android.library"


def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["DropShadow_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["DropShadow_" + name]).toInteger()
}

def reactNativeRootDir = resolveReactNativeDirectory()
def reactProperties = new Properties()
file("$reactNativeRootDir/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }

def reactNativeVersion = reactProperties.getProperty("VERSION_NAME")
def (reactNativeMajorVersion, reactNativeMinorVersion) = reactNativeVersion.split("\\.").collect { it.isInteger() ? it.toInteger() : it }

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  if (major == 7 && minor >= 3) {
    return true
  }

  return major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.dropShadow"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

}

repositories {
  mavenCentral()
  google()

   if (reactNativeMajorVersion == 0 && reactNativeMinorVersion < 71) {
    def androidSourcesDir = file("$reactNativeRootDir/android")
    def androidSourcesName = "React Native sources"

    if (androidSourcesDir.exists()) {
      maven {
        url androidSourcesDir.toString()
        name androidSourcesName
      }
    }
  }
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  if (reactNativeMajorVersion == 0 && reactNativeMinorVersion < 71) {
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"
    // From node_modules
  } else {
    implementation "com.facebook.react:react-android:+"
  }
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "DropShadow"
    codegenJavaPackageName = "com.dropShadow"
  }
}
